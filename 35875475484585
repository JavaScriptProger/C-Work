#include <iostream>
#include <stdlib.h>
using namespace std;

class Node
{
public:
	Node *next;
	Node *prev;
	int value;

	Node(int in){
		this->next = nullptr;
		this->prev = nullptr;
		this->value = in;
	};
};

class List
{
public:
	Node *root;
	int size;

	List(){
		root = nullptr;
		size = 0;
	};

	void Add(int in){
		if(this->root == nullptr){
			this->root = new Node(in);
		} else {
			if(in > this->root->value){
				Node *temp = root;
				Node *element = root;
				while(temp != nullptr) {
					if(temp != nullptr) {			
							element = temp; 
					}

					temp = temp->next;
				}

				cout << "Final:" << element->value << endl;

				//if(){}

				Node *obj = new Node(in);
				obj->prev = element;
				element->next = obj;
			} else {
				Node *temp = root;
				Node *obj = new Node(in);
				obj->next = temp;

				temp->prev = obj;
				root = temp->prev;
			}
		}
	};

	void Delete(int in){
		Node *left, *right;
		Node *temp = root;

		while(temp != nullptr){
			if(in == temp->value){
				break;
			}

			temp = temp->next;
		}

		if(temp == nullptr){
			cout << "Element for deleting doesnt found! Deleting impossible! Exit!" << endl;
			return;
		}

		left = temp->prev;
		right = temp->next;

		left->next = right;
		right->prev = left;
		cout << "Delete:" << temp->value << endl;
		temp = nullptr;
	};

	int Search(int in){
		Node *temp = root;

		while(temp != nullptr){
			if(in == temp->value){
				return in;
			}

			temp = temp->next;
		}

		return 0;
	};

	int operator[](int value) {
		return Search(value);
	}

	void Test(){
		Node *temp = root;
		while(temp != nullptr){
			cout << "Value:" << temp->value << endl;
			temp = temp->next;
		}
	}
};

int main(){
	List list;

	cout << "Add:" << endl;
	list.Add(5);
	list.Add(6);
	list.Add(4);
	list.Add(7);
	//list.Add(9);
	list.Add(8);

	cout << "\nPrint:" << endl;
	list.Test();

	cout << "\nSearch:" << endl;

	cout << list[81] << endl;
	cout << list[5] << endl;
	cout << list[7] << endl;

	list.Delete(5);
	list.Delete(7);
	list.Delete(777);

	cout << "\nPrint:" << endl;
	list.Test();

	system("pause");
	return 0;
}
